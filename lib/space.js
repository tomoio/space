// Generated by CoffeeScript 1.3.3
(function() {
  var Space, fs, path;

  fs = require('fs');

  path = require('path');

  module.exports = Space = (function() {

    function Space() {}

    Space.makeSpace = function(num) {
      var spaces, v;
      if (num === 0) {
        return '';
      } else {
        spaces = (function() {
          var _i, _ref, _results;
          _results = [];
          for (v = _i = 0, _ref = num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; v = 0 <= _ref ? ++_i : --_i) {
            _results.push(' ');
          }
          return _results;
        })();
        return spaces.join('');
      }
    };

    Space.modSpace = function(opts, cb) {
      var _this = this;
      return fs.readFile(path.resolve(opts.file), 'utf8', function(err, body) {
        var broken, len, lines, min, newlines, spaces, v, _i, _j, _k, _len, _len1, _len2;
        if (err != null) {
          return cb({
            err: err
          });
        } else {
          spaces = [];
          min = false;
          lines = body.split('\n');
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            v = lines[_i];
            len = v.match(/^\s*/)[0].length;
            if (len !== 0) {
              spaces.push(len);
              if (min === false) {
                min = len;
              } else {
                min = Math.min(min, len);
              }
            }
          }
          broken = false;
          if (min !== false) {
            for (_j = 0, _len1 = spaces.length; _j < _len1; _j++) {
              v = spaces[_j];
              if ((v % min) !== 0) {
                broken = true;
              }
            }
          }
          if (min !== false && broken === false) {
            newlines = [];
            for (_k = 0, _len2 = lines.length; _k < _len2; _k++) {
              v = lines[_k];
              len = v.match(/^\s*/)[0].length;
              newlines.push(Space.makeSpace((len / min) * opts.num) + v.replace(/^\s*/, ''));
            }
            if (opts.save) {
              return fs.writeFile(path.resolve(opts.file), newlines.join('\n'), function(err) {
                return cb({
                  err: null,
                  body: newlines.join('\n')
                });
              });
            } else {
              return cb({
                err: null,
                body: newlines.join('\n')
              });
            }
          } else if (broken) {
            return cb({
              err: true,
              body: lines.join('\n')
            });
          } else {
            return cb({
              err: null,
              body: lines.join('\n')
            });
          }
        }
      });
    };

    return Space;

  })();

}).call(this);
